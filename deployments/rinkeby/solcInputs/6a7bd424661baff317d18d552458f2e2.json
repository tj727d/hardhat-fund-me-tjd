{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7; //version of solidity (always at the top of a contract) ^ means this version or higher\n\n// Get Funds from users\n// Withdraw funds\n// Set minimum funding value in USD\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// tricks to minimize gas\n// constant and immutable keywords for variables save gas\n// use errors instead of requires\n\nerror NotOwner();\n\ncontract FundMe {\n    // using the library price converter for uint256\n    using PriceConverter for uint256;\n    // function for users to send money to the contract\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address[] public funders;\n\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    //called on contract deployment\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // A function must be payable in ourder to accept payment\n    function fund() public payable {\n        // Want to be able to set a minimum fund amount in usd\n        // 1.How do we send ETH to thiscontract?\n\n        // require the value sent to be at least 1 ETH\n        // if the condition for the require isn't met, it will revert the transaction with the contract with the message put in the statement\n\n        //rever means to undo any action before the require statement, and send the remaining gas back\n        //msg.value is the value sent to the function\n\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Donation did not meet minimum amount\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    // function for the owner of the contract to withdraw the funds provided\n\n    // modifier is a keyword that can be added to the function declaration\n    // to modify the function with the modifiers functionality before running the rest of the function\n    function withdraw() public onlyOwner {\n        /* for (starting index, ending index, step amount){\n            code    \n        }\n        */\n        // clear funders amount\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        // reset the array\n        // create a empty new array\n        funders = new address[](0);\n        //withdraw funds\n        // 3 ways to send funds from a contract are transfer send and call\n\n        // //transfer\n        // //address(this) is the address of the contract\n        // payable(msg.sender.transfer(address(this).balance));\n\n        // //send\n        // bool sendSuccess = (payable(msg.sender).send(address(this).balance));\n        // require(sendSuccess, \"Send failed\");\n\n        //call (recomended way to send eth)\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    // _; is the code in the function\n    // so this modifier runs the require first and then the function\n    modifier onlyOwner() {\n        //require(msg.sender == i_owner, \"Sender is not owner\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    //what happens if someone sends this contract ETH without calling the fund function\n\n    //two functions that can be used to handle funds recieved by the contract are\n    // recieve() is only called when a transaction has no call data\n    // fallback\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7; //version of solidity (always at the top of a contract) ^ means this version or higher\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        //NEDD External contract ABI\n        //and Address (0x8A753747A1Fa494EC906cE90E9f37563A8AF630e RINKEBY)\n\n        (, int256 price, , , ) = priceFeed.latestRoundData(); //ETH in terms of usd\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        //convert eth to usd and return amount in usd\n        uint256 ethPrice = getPrice(priceFeed);\n        // ETH/USD Price = 3000_00000000000000\n        // 1_000000000000000000 ETH is sent\n        //\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUSD;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
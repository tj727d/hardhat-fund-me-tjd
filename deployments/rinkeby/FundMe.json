{
  "address": "0x2a974E1639545F6a60FD607fe73e8AdE8D0d680E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf16b01cbbb1e7901381af38a761d303c3407c2393c3ff0d244c05c5d2392da12",
  "receipt": {
    "to": null,
    "from": "0xF1f28a93E966D504bC86868247136b18281f3f08",
    "contractAddress": "0x2a974E1639545F6a60FD607fe73e8AdE8D0d680E",
    "transactionIndex": 13,
    "gasUsed": "857806",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa3ba398dccb3de6e310ad00bcccf3b374c41f978cefda9eef7fc548087ac9e0d",
    "transactionHash": "0xf16b01cbbb1e7901381af38a761d303c3407c2393c3ff0d244c05c5d2392da12",
    "logs": [],
    "blockNumber": 10787597,
    "cumulativeGasUsed": "2568281",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "6a7bd424661baff317d18d552458f2e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7; //version of solidity (always at the top of a contract) ^ means this version or higher\\n\\n// Get Funds from users\\n// Withdraw funds\\n// Set minimum funding value in USD\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// tricks to minimize gas\\n// constant and immutable keywords for variables save gas\\n// use errors instead of requires\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    // using the library price converter for uint256\\n    using PriceConverter for uint256;\\n    // function for users to send money to the contract\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address[] public funders;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    address public immutable i_owner;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    //called on contract deployment\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // A function must be payable in ourder to accept payment\\n    function fund() public payable {\\n        // Want to be able to set a minimum fund amount in usd\\n        // 1.How do we send ETH to thiscontract?\\n\\n        // require the value sent to be at least 1 ETH\\n        // if the condition for the require isn't met, it will revert the transaction with the contract with the message put in the statement\\n\\n        //rever means to undo any action before the require statement, and send the remaining gas back\\n        //msg.value is the value sent to the function\\n\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Donation did not meet minimum amount\\\"\\n        );\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    // function for the owner of the contract to withdraw the funds provided\\n\\n    // modifier is a keyword that can be added to the function declaration\\n    // to modify the function with the modifiers functionality before running the rest of the function\\n    function withdraw() public onlyOwner {\\n        /* for (starting index, ending index, step amount){\\n            code    \\n        }\\n        */\\n        // clear funders amount\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        // reset the array\\n        // create a empty new array\\n        funders = new address[](0);\\n        //withdraw funds\\n        // 3 ways to send funds from a contract are transfer send and call\\n\\n        // //transfer\\n        // //address(this) is the address of the contract\\n        // payable(msg.sender.transfer(address(this).balance));\\n\\n        // //send\\n        // bool sendSuccess = (payable(msg.sender).send(address(this).balance));\\n        // require(sendSuccess, \\\"Send failed\\\");\\n\\n        //call (recomended way to send eth)\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // _; is the code in the function\\n    // so this modifier runs the require first and then the function\\n    modifier onlyOwner() {\\n        //require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n        if (msg.sender != i_owner) {\\n            revert NotOwner();\\n        }\\n        _;\\n    }\\n\\n    //what happens if someone sends this contract ETH without calling the fund function\\n\\n    //two functions that can be used to handle funds recieved by the contract are\\n    // recieve() is only called when a transaction has no call data\\n    // fallback\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x726d08bbda1bdb24c7fb366181eb85063b6dc1cfaae5fd3a3855323f78a14b7d\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7; //version of solidity (always at the top of a contract) ^ means this version or higher\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //NEDD External contract ABI\\n        //and Address (0x8A753747A1Fa494EC906cE90E9f37563A8AF630e RINKEBY)\\n\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); //ETH in terms of usd\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        //convert eth to usd and return amount in usd\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // ETH/USD Price = 3000_00000000000000\\n        // 1_000000000000000000 ETH is sent\\n        //\\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUSD;\\n    }\\n}\\n\",\"keccak256\":\"0x4c37f149e31ae8525add2d53e8deb64c609461f2d19feeb557d6ef9927bab524\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f89380380610f89833981810160405281019061003291906100c5565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b6000815190506100bf81610129565b92915050565b6000602082840312156100db576100da610124565b5b60006100e9848285016100b0565b91505092915050565b60006100fd82610104565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610132816100f2565b811461013d57600080fd5b50565b60805160601c610e24610165600039600081816102d4015261055f0152610e246000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107ac565b610512565b6040516100d891906109a2565b60405180910390f35b3480156100ed57600080fd5b506100f661052a565b60405161010391906109a2565b60405180910390f35b34801561011857600080fd5b50610121610537565b60405161012e9190610947565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055d565b604051610163919061092c565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906107d9565b610581565b6040516101a0919061092c565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610982565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040257600080828154811061037c5761037b610cb4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa90610c0d565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610ce3565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b506000908051906020019061046292919061069c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048990610917565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b505090508061050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690610962565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105cc836105fc565b90506000670de0b6b3a764000085836105e59190610b21565b6105ef91906109d9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190610806565b5050509150506402540be400816106949190610a0a565b915050919050565b828054828255906000526020600020908101928215610715579160200282015b828111156107145782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106bc565b5b5090506107229190610726565b5090565b5b8082111561073f576000816000905550600101610727565b5090565b60008135905061075281610d92565b92915050565b60008151905061076781610da9565b92915050565b60008135905061077c81610dc0565b92915050565b60008151905061079181610dc0565b92915050565b6000815190506107a681610dd7565b92915050565b6000602082840312156107c2576107c1610d12565b5b60006107d084828501610743565b91505092915050565b6000602082840312156107ef576107ee610d12565b5b60006107fd8482850161076d565b91505092915050565b600080600080600060a0868803121561082257610821610d12565b5b600061083088828901610797565b955050602061084188828901610758565b945050604061085288828901610782565b935050606061086388828901610782565b925050608061087488828901610797565b9150509295509295909350565b61088a81610b7b565b82525050565b61089981610bd7565b82525050565b60006108ac600b836109c8565b91506108b782610d17565b602082019050919050565b60006108cf6024836109c8565b91506108da82610d40565b604082019050919050565b60006108f26000836109bd565b91506108fd82610d8f565b600082019050919050565b61091181610bb7565b82525050565b6000610922826108e5565b9150819050919050565b60006020820190506109416000830184610881565b92915050565b600060208201905061095c6000830184610890565b92915050565b6000602082019050818103600083015261097b8161089f565b9050919050565b6000602082019050818103600083015261099b816108c2565b9050919050565b60006020820190506109b76000830184610908565b92915050565b600081905092915050565b600082825260208201905092915050565b60006109e482610bb7565b91506109ef83610bb7565b9250826109ff576109fe610c85565b5b828204905092915050565b6000610a1582610b8d565b9150610a2083610b8d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610a5f57610a5e610c56565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610a9c57610a9b610c56565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ad957610ad8610c56565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610b1657610b15610c56565b5b828202905092915050565b6000610b2c82610bb7565b9150610b3783610bb7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b7057610b6f610c56565b5b828202905092915050565b6000610b8682610b97565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610be282610be9565b9050919050565b6000610bf482610bfb565b9050919050565b6000610c0682610b97565b9050919050565b6000610c1882610bb7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c4b57610c4a610c56565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f446f6e6174696f6e20646964206e6f74206d656574206d696e696d756d20616d60008201527f6f756e7400000000000000000000000000000000000000000000000000000000602082015250565b50565b610d9b81610b7b565b8114610da657600080fd5b50565b610db281610b8d565b8114610dbd57600080fd5b50565b610dc981610bb7565b8114610dd457600080fd5b50565b610de081610bc1565b8114610deb57600080fd5b5056fea2646970667358221220b81159731c21e1471e1a818a64c0d63c041c0284a860729408e7a26bb9bc803a64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107ac565b610512565b6040516100d891906109a2565b60405180910390f35b3480156100ed57600080fd5b506100f661052a565b60405161010391906109a2565b60405180910390f35b34801561011857600080fd5b50610121610537565b60405161012e9190610947565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055d565b604051610163919061092c565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906107d9565b610581565b6040516101a0919061092c565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610982565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040257600080828154811061037c5761037b610cb4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa90610c0d565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610ce3565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b506000908051906020019061046292919061069c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048990610917565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b505090508061050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690610962565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105cc836105fc565b90506000670de0b6b3a764000085836105e59190610b21565b6105ef91906109d9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190610806565b5050509150506402540be400816106949190610a0a565b915050919050565b828054828255906000526020600020908101928215610715579160200282015b828111156107145782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106bc565b5b5090506107229190610726565b5090565b5b8082111561073f576000816000905550600101610727565b5090565b60008135905061075281610d92565b92915050565b60008151905061076781610da9565b92915050565b60008135905061077c81610dc0565b92915050565b60008151905061079181610dc0565b92915050565b6000815190506107a681610dd7565b92915050565b6000602082840312156107c2576107c1610d12565b5b60006107d084828501610743565b91505092915050565b6000602082840312156107ef576107ee610d12565b5b60006107fd8482850161076d565b91505092915050565b600080600080600060a0868803121561082257610821610d12565b5b600061083088828901610797565b955050602061084188828901610758565b945050604061085288828901610782565b935050606061086388828901610782565b925050608061087488828901610797565b9150509295509295909350565b61088a81610b7b565b82525050565b61089981610bd7565b82525050565b60006108ac600b836109c8565b91506108b782610d17565b602082019050919050565b60006108cf6024836109c8565b91506108da82610d40565b604082019050919050565b60006108f26000836109bd565b91506108fd82610d8f565b600082019050919050565b61091181610bb7565b82525050565b6000610922826108e5565b9150819050919050565b60006020820190506109416000830184610881565b92915050565b600060208201905061095c6000830184610890565b92915050565b6000602082019050818103600083015261097b8161089f565b9050919050565b6000602082019050818103600083015261099b816108c2565b9050919050565b60006020820190506109b76000830184610908565b92915050565b600081905092915050565b600082825260208201905092915050565b60006109e482610bb7565b91506109ef83610bb7565b9250826109ff576109fe610c85565b5b828204905092915050565b6000610a1582610b8d565b9150610a2083610b8d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610a5f57610a5e610c56565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610a9c57610a9b610c56565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ad957610ad8610c56565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610b1657610b15610c56565b5b828202905092915050565b6000610b2c82610bb7565b9150610b3783610bb7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b7057610b6f610c56565b5b828202905092915050565b6000610b8682610b97565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610be282610be9565b9050919050565b6000610bf482610bfb565b9050919050565b6000610c0682610b97565b9050919050565b6000610c1882610bb7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c4b57610c4a610c56565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f446f6e6174696f6e20646964206e6f74206d656574206d696e696d756d20616d60008201527f6f756e7400000000000000000000000000000000000000000000000000000000602082015250565b50565b610d9b81610b7b565b8114610da657600080fd5b50565b610db281610b8d565b8114610dbd57600080fd5b50565b610dc981610bb7565b8114610dd457600080fd5b50565b610de081610bc1565b8114610deb57600080fd5b5056fea2646970667358221220b81159731c21e1471e1a818a64c0d63c041c0284a860729408e7a26bb9bc803a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}